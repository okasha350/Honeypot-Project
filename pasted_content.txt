cat > "$EVIDENCE_FILE" << EOF
========================================
CHAIN OF CUSTODY RECORD
========================================

Evidence ID: $EVIDENCE_ID
Date/Time: $(date)

SAMPLE INFORMATION:
-------------------
Filename: $SAMPLE_NAME
Source: $SOURCE
Description: $DESCRIPTION

HASH VALUES:
------------
MD5: $MD5
SHA256: $SHA256
File Size: $SIZE bytes

CUSTODY CHAIN:
--------------
[1] Collected by: $ANALYST
    Date/Time: $(date)
    Action: Initial collection from $SOURCE
    Location: $SAMPLES_DIR

========================================
EOF

echo ""
echo -e "${GREEN}‚úì Documentation complete!${NC}"
echo "Evidence ID: $EVIDENCE_ID"
echo "MD5: $MD5"
echo "SHA256: $SHA256"
echo "File: $EVIDENCE_FILE"
```
```bash
chmod +x ~/honeypot-project/scripts/document-sample.sh
```

### Secure Transfer Script

Create `~/honeypot-project/scripts/transfer-to-sandbox.sh`:
```bash
#!/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

SAMPLES_DIR="$HOME/honeypot-project/samples"
SANDBOX_IP="192.168.100.30"
SANDBOX_USER="sandbox"

echo "========================================"
echo "  Secure Sample Transfer"
echo "========================================"
echo ""

echo "Available samples:"
ls -lh "$SAMPLES_DIR"
echo ""

read -p "Sample filename: " SAMPLE_NAME

if [ ! -f "$SAMPLES_DIR/$SAMPLE_NAME" ]; then
    echo -e "${RED}Error: Sample not found!${NC}"
    exit 1
fi

echo ""
echo "Calculating hash..."
MD5_BEFORE=$(md5sum "$SAMPLES_DIR/$SAMPLE_NAME" | awk '{print $1}')
echo "MD5: $MD5_BEFORE"

echo ""
echo "Transferring to Sandbox..."
scp "$SAMPLES_DIR/$SAMPLE_NAME" "$SANDBOX_USER@$SANDBOX_IP:~/samples/"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úì Transfer successful!${NC}"
    
    echo ""
    echo "Verifying integrity..."
    MD5_AFTER=$(ssh "$SANDBOX_USER@$SANDBOX_IP" "md5sum ~/samples/$SAMPLE_NAME" | awk '{print $1}')
    
    if [ "$MD5_BEFORE" == "$MD5_AFTER" ]; then
        echo -e "${GREEN}‚úì Integrity verified!${NC}"
        echo "MD5: $MD5_AFTER"
    else
        echo -e "${RED}‚úó Hash mismatch!${NC}"
        echo "Before: $MD5_BEFORE"
        echo "After: $MD5_AFTER"
    fi
else
    echo -e "${RED}‚úó Transfer failed!${NC}"
    exit 1
fi

echo ""
echo "========================================"
```
```bash
chmod +x ~/honeypot-project/scripts/transfer-to-sandbox.sh
```

## Part 3: Testing Workflow

### 1. Collect Sample (Honeypot VM)
```bash
cd ~/dionaea-docker/binaries

# Create test sample (EICAR)
echo 'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' > eicar-test.txt

# Transfer to Monitoring
scp eicar-test.txt monitor@192.168.100.20:~/honeypot-project/samples/
```

### 2. Document Evidence (Monitoring VM)
```bash
cd ~/honeypot-project/scripts
./document-sample.sh

# Fill in:
# Filename: eicar-test.txt
# Source: Dionaea Docker
# Your name: [Your Name]
# Description: EICAR test file
```

### 3. Transfer to Sandbox
```bash
./transfer-to-sandbox.sh

# Enter filename: eicar-test.txt
```

### 4. Analyze (Sandbox VM)
```bash
./analyze.sh ~/samples/eicar-test.txt

# View report
cat ~/analysis-reports/report-*.txt
```

## Monitoring Scripts

### System Check Script

Create `~/honeypot-project/scripts/full-system-check.sh`:
```bash
#!/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "========================================"
echo -e "${BLUE}  FULL SYSTEM CHECK${NC}"
echo "========================================"
echo ""

PASS=0
FAIL=0

# Network tests
echo -e "${YELLOW}=== NETWORK ===${NC}"
for ip in 192.168.100.10 192.168.100.30 192.168.100.50; do
    echo -n "$ip: "
    if ping -c 1 -W 2 $ip > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC}"
        ((PASS++))
    else
        echo -e "${RED}‚úó${NC}"
        ((FAIL++))
    fi
done
echo ""

# Honeypot services
echo -e "${YELLOW}=== HONEYPOTS ===${NC}"
echo -n "SSH Port 22: "
if nc -z -w 2 192.168.100.10 22 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC}"
    ((PASS++))
else
    echo -e "${RED}‚úó${NC}"
    ((FAIL++))
fi

echo -n "FTP Port 21: "
if nc -z -w 2 192.168.100.10 21 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC}"
    ((PASS++))
else
    echo -e "${RED}‚úó${NC}"
    ((FAIL++))
fi
echo ""

# Logs
echo -e "${YELLOW}=== LOGS ===${NC}"
echo -n "Cowrie logs: "
if [ -f /var/log/honeypot/cowrie.log ] && [ -s /var/log/honeypot/cowrie.log ]; then
    echo -e "${GREEN}‚úì${NC}"
    ((PASS++))
else
    echo -e "${RED}‚úó${NC}"
    ((FAIL++))
fi

echo -n "Dionaea logs: "
if [ -f /var/log/honeypot/dionaea.log ] && [ -s /var/log/honeypot/dionaea.log ]; then
    echo -e "${GREEN}‚úì${NC}"
    ((PASS++))
else
    echo -e "${RED}‚úó${NC}"
    ((FAIL++))
fi
echo ""

# Sandbox
echo -e "${YELLOW}=== SANDBOX ===${NC}"
echo -n "SSH to Sandbox: "
if ssh -o BatchMode=yes -o ConnectTimeout=2 sandbox@192.168.100.30 "exit" 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC}"
    ((PASS++))
else
    echo -e "${RED}‚úó${NC}"
    ((FAIL++))
fi
echo ""

# Summary
echo "========================================"
echo -e "${GREEN}Passed: $PASS${NC}"
echo -e "${RED}Failed: $FAIL${NC}"
echo ""

if [ $FAIL -eq 0 ]; then
    echo -e "${GREEN}üéâ All tests passed!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Some tests failed${NC}"
fi
```
```bash
chmod +x ~/honeypot-project/scripts/full-system-check.sh
```

## Deliverables

- ‚úÖ Sandbox VM with analysis tools
- ‚úÖ SSH key authentication configured
- ‚úÖ Evidence documentation system
- ‚úÖ Secure transfer mechanism
- ‚úÖ Automated analysis script
- ‚úÖ Complete workflow tested

## Best Practices

### Security
- Never run malware outside sandbox
- Always verify file integrity (hashes)
- Maintain detailed chain of custody
- Regular snapshots before analysis

### Documentation
- Document every sample collected
- Record all analysis actions
- Maintain evidence integrity
- Use unique Evidence IDs

### Workflow
1. Collect sample from honeypot
2. Transfer to Monitoring VM
3. Document with chain of custody
4. Securely transfer to Sandbox
5. Perform analysis
6. Generate report
7. Archive evidence

## Troubleshooting

**SSH key not working:**
```bash
# Regenerate and copy
ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa
ssh-copy-id sandbox@192.168.100.30
```

**Transfer fails:**
```bash
# Check connectivity
ping 192.168.100.30
ssh sandbox@192.168.100.30 "echo test"
```

**ClamAV not updated:**
```bash
sudo freshclam
sudo systemctl restart clamav-freshclam
```

## Project Status

‚úÖ Week 2: Network Infrastructure
‚úÖ Week 3: Honeypot Deployment  
‚úÖ Week 4: Sandbox & Evidence Management

Ready for production use!